spring:
  profiles:
    default: local
    group:
      #      local:
      #        - file-default-logging
      #        - file-error-logging
      dev:
        - file-default-logging
        - file-error-logging
        - slack-error-logging
      prod:
        - file-error-logging
        - slack-error-logging
  application:
    name: hhplus-concert-service
  datasource:
    hikari:
      jdbc-url: jdbc:mysql://localhost:23306/concert?useUnicode=yes&characterEncoding=UTF-8&rewriteBatchedStatements=true
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: root
      password: 1234
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
        default_batch_fetch_size: 500
  data:
    redis:
      host: localhost
      port: 26379
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: hhplus-concert

server:
  servlet:
    context-path: /api
  port: 8081

logging:
  level:
    org:
      web: debug
      hibernate:
        SQL: debug

jwt:
  secret-key: hhplusConcertSecretKeyForAuthenticationJwtToken

push:
  service:
    url: localhost:8085/api/v1

resilience4j:
  circuitbreaker:
    instances:
      pushServiceCircuitBreaker:
        failure-rate-threshold: 10   # 실패 10% 이상 시 서킷 오픈
        slow-call-duration-threshold: 1000   # 1000ms 이상 소요 시 실패로 간주
        slow-call-rate-threshold: 10   # slowCallDurationThreshold 초과 비율이 10% 이상 시 서킷 오픈
        wait-duration-in-open-state: 30000   # OPEN -> HALF-OPEN 전환 전 기다리는 시간
        minimum-number-of-calls: 50   # 집계에 필요한 최소 호출 수
        sliding-window-size: 100   # 서킷 CLOSE 상태에서 N회 호출 도달 시 failureRateThreshold 실패 비율 계산
        permitted-number-of-calls-in-half-open-state: 30   # HALFOPEN -> CLOSE or OPEN 으로 판단하기 위해 호출 횟수
  retry:
    instances:
      pushServiceRetry:
        maxAttempts: 3            # 최대 3번 재시도
        waitDuration: 2s          # 각 재시도 사이의 대기 시간 (2초)

---

spring:
  config:
    activate:
      on-profile: container
  datasource:
    hikari:
      jdbc-url: jdbc:mysql://host.docker.internal:23306/concert?useUnicode=yes&characterEncoding=UTF-8&rewriteBatchedStatements=true
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: root
      password: 1234
  jpa:
    database: mysql
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        default_batch_fetch_size: 500
  data:
    redis:
      host: host.docker.internal
      port: 26379
  kafka:
    bootstrap-servers: host.docker.internal:9093
    consumer:
      group-id: hhplus-payment

logging:
  level:
    org:
      web: debug
      hibernate:
        SQL: debug


---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    hikari:
      jdbc-url: jdbc:mysql://database-hhplus.cxyqk8cmu4tk.us-east-1.rds.amazonaws.com/concert
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: root
      password: hhplus123
  jpa:
    database: mysql
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        default_batch_fetch_size: 500
  data:
    redis:
      host: redis-cluster.1i6zcb.ng.0001.use1.cache.amazonaws.com
      port: 6379
  kafka:
    bootstrap-servers: b-1.kafkacluster.ogsg7s.c18.kafka.us-east-1.amazonaws.com:9092
    consumer:
      group-id: hhplus-concert

logging:
  level:
    org:
      web: debug
      hibernate:
        SQL: debug

---
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    hikari:
      jdbc-url: jdbc:mysql://localhost:53306/concert?useUnicode=yes&characterEncoding=UTF-8&rewriteBatchedStatements=true
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: root
      password: 1234
  jpa:
    database: mysql
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        default_batch_fetch_size: 500

logging:
  level:
    org:
      web: INFO
      hibernate:
        SQL: INFO
